{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Region K Means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import networkx\n",
    "import libpysal\n",
    "import numpy\n",
    "from collections import defaultdict\n",
    "import sys\n",
    "import os\n",
    "sys.path.append(os.path.abspath('..'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "exact solver\n"
     ]
    }
   ],
   "source": [
    "import spopt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "numpy.random.seed(12345)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "w = libpysal.weights.lat2W(3,3)\n",
    "data = numpy.random.normal(size=(w.n,3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: [3, 1],\n",
       " 3: [0, 6, 4],\n",
       " 1: [0, 4, 2],\n",
       " 4: [1, 3, 7, 5],\n",
       " 2: [1, 5],\n",
       " 5: [2, 4, 8],\n",
       " 6: [3, 7],\n",
       " 7: [4, 6, 8],\n",
       " 8: [5, 7]}"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w.neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "RKM = spopt.RegionKMeansHeuristic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = RKM(data, 3, w)\n",
    "model.solve()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "dim = 10\n",
    "w = libpysal.weights.lat2W(dim,dim)\n",
    "data = numpy.random.normal(size=(w.n,3))\n",
    "model = RKM(data, 20, w)\n",
    "model.solve()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.iters_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([16, 16, 16, 16, 16,  6,  6,  6, 10, 10,  5,  5, 17, 17, 17, 17,  6,\n",
       "        6,  6, 10,  5,  5, 17, 17, 12, 12, 14,  6, 10, 10,  8,  5, 12, 12,\n",
       "       12, 14, 14, 14, 10, 10,  8,  8,  8, 11, 18, 18, 14, 14,  1,  1,  8,\n",
       "        4, 11, 11, 11, 18, 18, 14,  1,  7,  4,  4,  4, 11, 11, 18, 18,  1,\n",
       "        1,  7,  4,  4,  3,  3,  2,  2,  2, 13,  7,  7,  4,  9,  9,  2,  2,\n",
       "       19, 19, 13, 13, 13,  9,  9,  9, 19, 19, 19, 19,  0, 15, 15])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20,)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numpy.unique(model.labels_).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "libpysal.weights.build_lattice_shapefile(dim, dim, \"lattice.shp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf = geopandas.read_file('lattice.shp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f850f7eb780>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAALw0lEQVR4nO3df6zddXnA8fezFoZFXSE9orY9u7hg0biQupuJkpCFYsJWQ13iIiYw5thuljmpxuhwS8afmoUY+WMh6RAlSHCuYmBqFIYQsmRpRlsMP64KQYRCoSXoMGSmMJ/9cY/Z5Xort+f7Ofd82+f9Spp77rmnn++T277v95xzz/3cyEwknfh+Y9oDSFodxi4VYexSEcYuFWHsUhFrV/NgGzZsyJmZmdU8pFTK3r17n8vMwXIfW9XYZ2ZmuO+++1bzkFIpEfHjo33Mu/FSEcYuFWHsUhHGLhVh7FIRrxp7RNwQEYci4sFF150eEXdGxCOjt6dNdkxJXa3kzP4l4KIl110F3JWZZwF3jd6X1GOvGntm3gs8v+TqHcCNo8s3Au9vPJekxsZ9Uc0ZmXkQIDMPRsQbjnbDiJgD5gCGw+GKFp+57poxx9Lb/uHRpus9ddmWpuv12frtTzdd79wNjzdd7x/P+ddOf3/iT9Bl5q7MnM3M2cFg2VfxSVoF48b+bES8CWD09lC7kSRNwrix3w5cPrp8OXBbm3EkTcpKvvV2C/CfwJaIOBARVwCfBd4bEY8A7x29L6nHXvUJusz80FE+tK3xLJImyFfQSUUYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1TEqv5ix2nZsLfd17Tnfu8XzdY6Hmy86QfTHuGoKu2P14JndqkIY5eKMHapCGOXijB2qQhjl4owdqkIY5eKMHapCGOXijB2qQhjl4owdqkIY5eKMHapCGOXiugUe0R8PCIeiogHI+KWiDil1WCS2ho79ojYCFwJzGbmO4A1wCWtBpPUVte78WuB10TEWmAd8HT3kSRNwth70GXmUxFxDfAE8D/AHZl5x9LbRcQcMAcwHA5XtHbLPeNaaz3b71zxw6brcXvb5Vp64eK2663f3u9zy/6tjRfsuP1hl7vxpwE7gDOBNwOnRsSlS2+XmbsyczYzZweDwfiTSuqky2nqQuBHmXk4M18CbgXe02YsSa11if0J4NyIWBcRAWwD5tuMJam1sWPPzD3AbmAf8MBorV2N5pLUWKdfEpGZVwNXN5pF0gT192lvSU0Zu1SEsUtFGLtUhLFLRRi7VISxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1REpx9xraj5nnE995nNt7VbbH+7pQA+csGfNl3vm/d+vel6fdt+1TO7VISxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1REp9gjYn1E7I6I70fEfES8u9VgktrqunnFtcC3M/MDEXEysK7BTJImYOzYI+L1wPnAnwFk5hHgSJuxJLXW5cz+FuAw8MWIOAfYC+zMzBcX3ygi5oA5gOFw2OFw4/vM3/9zs7V2fu+DzdYC+N0znmm6XtNtpHRC6fKYfS3wTuC6zNwKvAhctfRGmbkrM2czc3YwGHQ4nKQuusR+ADiQmXtG7+9mIX5JPTR27Jn5DPBkRGwZXbUNeLjJVJKa6/ps/EeBm0fPxD8GfLj7SJImoVPsmXk/MNtoFkkT5CvopCKMXSrC2KUijF0qwtilIoxdKsLYpSKMXSrC2KUijF0qwtilIoxdKsLYpSKMXSqi68+zT8Sff/Lfpj3Cqnng2Te2XXBz2+W23XNl2wUbOpufNl1v+/l/3HS9b9779abrdeWZXSrC2KUijF0qwtilIoxdKsLYpSKMXSrC2KUijF0qwtilIoxdKsLYpSKMXSrC2KUijF0qwtilIjrHHhFrImJ/RHyjxUCSJqPFmX0nMN9gHUkT1Cn2iNgEbAeubzOOpEnpugfd54FPAa872g0iYg6YAxgOhx0PN33XnvMvTdfb+b0PNl2vz3vGtfa/p5/adL01z7/YdL2+GfvMHhHvAw5l5t5fd7vM3JWZs5k5OxgMxj2cpI663I0/D7g4Ih4HvgJcEBFfbjKVpObGjj0zP52ZmzJzBrgE+G5mXtpsMklN+X12qYgmvyQiM+8B7mmxlqTJ8MwuFWHsUhHGLhVh7FIRxi4VYexSEcYuFWHsUhHGLhVh7FIRxi4VYexSEcYuFWHsUhFNfsRV/XHKD09put7P3/rzZmvN3NTvc8sjf3lG0/XeetNfNV3v0U92+/v9/uxLasbYpSKMXSrC2KUijF0qwtilIoxdKsLYpSKMXSrC2KUijF0qwtilIoxdKsLYpSKMXSpi7NgjYnNE3B0R8xHxUETsbDmYpLa6bF7xMvCJzNwXEa8D9kbEnZn5cKPZJDU09pk9Mw9m5r7R5Z8B88DGVoNJaqvJtlQRMQNsBfYs87E5YA5gOBy2ONwxu/pv/2Iqx12J9Y3X+8nZbdfr81ZSL/3Wb057hONK53/JiHgt8DXgY5n5wtKPZ+auzJzNzNnBYND1cJLG1Cn2iDiJhdBvzsxb24wkaRK6PBsfwBeA+cz8XLuRJE1ClzP7ecBlwAURcf/ozx81mktSY2M/QZeZ/wFEw1kkTVB/n2qV1JSxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0U02YNO4/vJ2f3+evvMu05uttYb9xxpttYkbP73l5qu9+SFJzVdr6t+/0+T1IyxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1SEsUtFGLtUhLFLRRi7VISxS0UYu1SEsUtFdIo9Ii6KiB9ExKMRcVWroSS1N3bsEbEG+CfgD4G3Ax+KiLe3GkxSW13O7L8PPJqZj2XmEeArwI42Y0lqrcsedBuBJxe9fwB419IbRcQcMAcwHA5XtPBfb7m7w1jLrPfVpstJx6UuZ/ZY5rr8lSsyd2XmbGbODgaDDoeT1EWX2A8Amxe9vwl4uts4kialS+z/BZwVEWdGxMnAJcDtbcaS1NrYj9kz8+WI+BvgO8Aa4IbMfKjZZJKa6vRLIjLzW8C3Gs0iaYJ8BZ1UhLFLRRi7VISxS0VE5q+8DmZyB4s4DPx4BTfdADw34XHG1efZoN/z9Xk2ODHm++3MXPbVa6sa+0pFxH2ZOTvtOZbT59mg3/P1eTY48efzbrxUhLFLRfQ19l3THuDX6PNs0O/5+jwbnODz9fIxu6T2+npml9SYsUtF9Cr2Pm9gGRGbI+LuiJiPiIciYue0Z1oqItZExP6I+Ma0Z1kqItZHxO6I+P7oc/juac/0SxHx8dG/6YMRcUtEnDLleW6IiEMR8eCi606PiDsj4pHR29OOdd3exH4cbGD5MvCJzHwbcC7wkZ7NB7ATmJ/2EEdxLfDtzDwbOIeezBkRG4ErgdnMfAcLP659yXSn4kvARUuuuwq4KzPPAu4avX9MehM7Pd/AMjMPZua+0eWfsfCfdeN0p/p/EbEJ2A5cP+1ZloqI1wPnA18AyMwjmfnT6U71CmuB10TEWmAdU95xKTPvBZ5fcvUO4MbR5RuB9x/run2KfbkNLHsT02IRMQNsBfZMd5JX+DzwKeAX0x5kGW8BDgNfHD3MuD4iTp32UACZ+RRwDfAEcBD478y8Y7pTLeuMzDwICyce4A3HukCfYl/RBpbTFhGvBb4GfCwzX5j2PAAR8T7gUGbunfYsR7EWeCdwXWZuBV5kjLuhkzB67LsDOBN4M3BqRFw63akmo0+x934Dy4g4iYXQb87MW6c9zyLnARdHxOMsPPy5ICK+PN2RXuEAcCAzf3lPaDcL8ffBhcCPMvNwZr4E3Aq8Z8ozLefZiHgTwOjtoWNdoE+x93oDy4gIFh5zzmfm56Y9z2KZ+enM3JSZMyx83r6bmb05O2XmM8CTEbFldNU24OEpjrTYE8C5EbFu9G+8jZ48ebjE7cDlo8uXA7cd6wKd9qBr6TjYwPI84DLggYi4f3Td34324dOr+yhw8+gL+WPAh6c8DwCZuScidgP7WPiOy36m/LLZiLgF+ANgQ0QcAK4GPgt8NSKuYOEL1J8c87q+XFaqoU934yVNkLFLRRi7VISxS0UYu1SEsUtFGLtUxP8B9XOc1Bjk6q4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gdf['region'] = model.labels_\n",
    "gdf.plot(column='region')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "areas = numpy.arange(dim*dim)\n",
    "regions = [areas[model.labels_==region] for region in range(20)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([97]),\n",
       " array([48, 49, 58, 67, 68]),\n",
       " array([74, 75, 76, 83, 84]),\n",
       " array([72, 73]),\n",
       " array([51, 60, 61, 62, 70, 71, 80]),\n",
       " array([10, 11, 20, 21, 31]),\n",
       " array([ 5,  6,  7, 16, 17, 18, 27]),\n",
       " array([59, 69, 78, 79]),\n",
       " array([30, 40, 41, 42, 50]),\n",
       " array([81, 82, 90, 91, 92]),\n",
       " array([ 8,  9, 19, 28, 29, 38, 39]),\n",
       " array([43, 52, 53, 54, 63, 64]),\n",
       " array([24, 25, 32, 33, 34]),\n",
       " array([77, 87, 88, 89]),\n",
       " array([26, 35, 36, 37, 46, 47, 57]),\n",
       " array([98, 99]),\n",
       " array([0, 1, 2, 3, 4]),\n",
       " array([12, 13, 14, 15, 22, 23]),\n",
       " array([44, 45, 55, 56, 65, 66]),\n",
       " array([85, 86, 93, 94, 95, 96])]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from spopt import w_to_g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "g = w_to_g(w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[97] True\n",
      "[48 49 58 67 68] True\n",
      "[74 75 76 83 84] True\n",
      "[72 73] True\n",
      "[51 60 61 62 70 71 80] True\n",
      "[10 11 20 21 31] True\n",
      "[ 5  6  7 16 17 18 27] True\n",
      "[59 69 78 79] True\n",
      "[30 40 41 42 50] True\n",
      "[81 82 90 91 92] True\n",
      "[ 8  9 19 28 29 38 39] True\n",
      "[43 52 53 54 63 64] True\n",
      "[24 25 32 33 34] True\n",
      "[77 87 88 89] True\n",
      "[26 35 36 37 46 47 57] True\n",
      "[98 99] True\n",
      "[0 1 2 3 4] True\n",
      "[12 13 14 15 22 23] True\n",
      "[44 45 55 56 65 66] True\n",
      "[85 86 93 94 95 96] True\n"
     ]
    }
   ],
   "source": [
    "for region in regions:\n",
    "    print(region, networkx.is_connected(g.subgraph(region)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
